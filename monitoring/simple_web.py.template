#!/usr/bin/env python3



from bottle import route, run, template,redirect
from datetime import datetime,timedelta
import pandas as pd
import os
import numpy as np
import json
stat_path='/opt/GITHUB_REPOSITORY/log/stats/'
@route('/<json>')
@route('/')
def index(json='html'):
    if json=='json':
        return os.listdir(stat_path)

    out=""
    for folder in os.listdir(stat_path):
        out+=f"<a href='daily/{folder}/'>{folder}</a> <br/>"
    return out


@route('/daily/<folder>/<json>')
@route('/daily/<folder>/<json>/')
def daily_json(folder,json='html'):
    return daily(folder,json=json)

@route('/daily/<folder>')
@route('/daily/<folder>/')
def daily(folder,json='html'):
    root=f'{stat_path}/{folder}'
    datehs=sorted([datetime.strptime(datef.split('.')[0],"%Y%m%d-%H") for datef in os.listdir(root)])
    dates=sorted(np.unique([date.replace(hour=0) for date in datehs]))
    date_dic={day.strftime("%Y%m%d"): {h.strftime("%H"):h for h in datehs if day<=h and h<day+timedelta(days=1)} for day in dates}
    
    if json=='json':
        return {day:{h for h in hours} for day,hours in date_dic.items()}

    out="<a href='json'>json</a><table><tr><th>date</th><th>hour</th></tr>"
    for day,hours in date_dic.items():
        hh=' '.join([f"<a href='{day}-{h}/'>{h}</a>" for h in hours])
        out+=f"<tr><td><a href='{day}/'>{day}</a></td><td>{hh}</td></tr>"
    
    out+='</table>'
    
    
    return out


@route('/daily/<folder>/<date>')
def hourly_redirect(folder,date):
    return redirect(f"{date}/")

@route('/daily/<folder>/<date>/')
@route('/daily/<folder>/<date>/<json>')
def hourly(folder,date,json="html"):
    root=f'{stat_path}/{folder}'
    out_json={}
    out_html=""
    try:
        hourly=datetime.strptime(date,"%Y%m%d-%H")
        
        df=pd.read_csv(f'{root}/{date}.csv',dtype={'haship':'Int64','download':'Int64','upload':'Int64'})
        df=df.set_index([col for col in df.columns if col in ['status','upstream','haship','asn_name','country_code','province','city']])
        
        if folder=='users':
            df,unique_users=aggregate_users(df)

            out_json['unique_users']=unique_users
            out_html+=f"unique_haships={unique_users}"
            

        if json=='json':
            out_json['details']=df_to_dict(df)
            return out_json
        out_html="<a href='json'>json</a><br/>"+out_html+df.to_html()
        return out_html
    except:
        alldf=''
        total=None
        for hour in sorted(os.listdir(root)):
            if date not in hour:continue
            hour_name=hour.split('.')[0]
            out_html+=f'<h5>{hour_name}</h5><a href="../{hour_name}/json">json</a><br/>'
            df=pd.read_csv(f'{root}/{hour}',dtype={'haship':'Int64','download':'Int64','upload':'Int64'})
            df=df.set_index([col for col in df.columns if col in ['status','upstream','haship','asn_name','country_code','province','city']])
            if total is None:
                total=df
            else:
                total=total.add(df,fill_value=0)
            
            if folder=='users':
                df,unique_users=aggregate_users(df)
                out_html+=f"<h8>{unique_users} unique users</h8>"
                
            out_html+=df.to_html()

        if total is not None:
            
            out_html_total=f'<h1>Total {date}</h1> <a href="json">json</a><br/>'
            if folder=='users':
                total,unique_users=aggregate_users(total)

                out_html_total+=f"<h8>{unique_users} unique users</h8>"
                out_json['unique_users']=unique_users
                

            out_html_total+=total.to_html()
            out_json['details']=df_to_dict(total)
            out_html=out_html_total+"<h1>Hourly</h1>"+out_html
        if json=='json':
            return out_json
        return out_html
    
def aggregate_users(df):
    df=df.reset_index()
    unique_users=len(df['haship'].unique())
    df=df.groupby(['status','upstream']).agg({'haship':'count', 'connection_count': 'sum'}).rename(columns={'haship':'unique_ips'})
    return df,unique_users


def df_to_dict(df):
    data=df.stack().to_dict()
    d = {}
    for t, v in data.items():
     e = d.setdefault(t[0], {})
     for k in t[1:-1]:
        e = e.setdefault(k, {})
     e[t[-1]] = v
    return d

run(host='localhost', port=440)